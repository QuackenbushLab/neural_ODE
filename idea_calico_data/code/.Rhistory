value.name = "expression",
na.rm = FALSE
)
full_data_melt[is.na(expression), .N] #these need interpolation
#do interpolation for these 98 randomly missing ones
full_data_melt[,
expression_LOCF := my_LOCF(expression),
by = .(pid, gene)]
full_data_melt[, log_med_exp := log(expression_LOCF) -
median(log(expression_LOCF), na.rm = T)]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
# let's to perc_change stuff
full_data_melt[,time := time - time[1], by = pid]
full_data_melt[,log_exp_LOCF_perc_change :=
(log_med_exp - log_med_exp[1]),
by = .(pid, response_status, gene)]
hist(full_data_melt$log_med_exp)
hist(full_data_melt$log_exp_LOCF_perc_change)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_exp_LOCF_perc_change)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_exp_LOCF_perc_change")
datamat
datamat[avail_1 = 0,]
datamat[,avail_1 == 0,]
datamat[avail_2 == 0,]
datamat[avail_3 == 0,]
full_data[pid = "1237537"]
full_data[pid == "1237537"]
full_data[pid == "1237537",.(time, MAP3K1)]
library(data.table)
library(zoo)
library(ggplot2)
my_LOCF <- function(vec){
new_vec <- na.locf(vec, na.rm = FALSE) #LOCF
if(is.na(new_vec[1])){
new_vec[1] <- vec[2] #NOCB
}
return(new_vec)
}
full_data <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/raw_rifnb_data.csv")
all_genes <- colnames(full_data)[6:ncol(full_data)]
all_genes <- toupper(gsub("\\s","_",gsub("-|[()]","",all_genes)))
colnames(full_data)[6:ncol(full_data)] <- all_genes
#expressin is measured as RPKM
subset_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/gene_names.csv")
subset_genes <- subset_genes$Symbol
length(subset_genes)
setdiff( subset_genes, all_genes)
setdiff(all_genes, subset_genes)
full_data[,mean(edss), by = response_status]
full_data[,.N == length(unique(sample_id))]
patient_conditions <- full_data[,.(pid, time, response_status, edss)]
full_data[, time := as.numeric(gsub("t","",time))]
full_data_melt <- melt(full_data,
id.vars = c("pid","time","response_status"),
measure.vars = subset_genes, #subset to 70 in paper
variable.name = "gene",
value.name = "expression",
na.rm = FALSE
)
full_data_melt[is.na(expression), .N] #these need interpolation
#do interpolation for these 98 randomly missing ones
full_data_melt[,
expression_LOCF := my_LOCF(expression),
by = .(pid, gene)]
full_data_melt[, log_med_exp := log(expression_LOCF) -
median(log(expression_LOCF), na.rm = T)]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
# let's to perc_change stuff
full_data_melt[,time := time - time[1], by = pid]
full_data_melt[,log_exp_LOCF_perc_change :=
(log_med_exp - log_med_exp[1]),
by = .(pid, response_status, gene)]
hist(full_data_melt$log_med_exp)
hist(full_data_melt$log_exp_LOCF_perc_change)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_exp_LOCF_perc_change)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_exp_LOCF_perc_change")
#datamat <- datamat[, .SD[1:(.N+1)],
#                   by=.(embryo, cell)][is.na(gene),
#                                       (stages_in_order) := as.list(stage_pseudo_times)]
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat[,c("pid","response_status","gene") := NULL]
top_row <- as.list(rep(NA, num_time))
top_row[[1]] <- num_genes
top_row[[2]] <- num_traj
datamat <- rbind(top_row, datamat)
write.csv(patient_conditions,
"C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/clean_data/patient_conditions.csv",
row.names = F)
write.table( datamat,
"C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/clean_data/rIFNbeta_70genes_53samples_percchange.csv",
sep=",",
row.names = FALSE,
col.names = FALSE,
na = "")
full_data_melt[,log_exp_LOCF_perc_change :=
(log_med_exp - log_med_exp[1]),
by = .(pid, response_status)]
hist(full_data_melt$log_med_exp)
hist(full_data_melt$log_exp_LOCF_perc_change)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_exp_LOCF_perc_change)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
library(data.table)
library(zoo)
library(ggplot2)
my_LOCF <- function(vec){
new_vec <- na.locf(vec, na.rm = FALSE) #LOCF
if(is.na(new_vec[1])){
new_vec[1] <- vec[2] #NOCB
}
return(new_vec)
}
full_data <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/raw_rifnb_data.csv")
all_genes <- colnames(full_data)[6:ncol(full_data)]
all_genes <- toupper(gsub("\\s","_",gsub("-|[()]","",all_genes)))
colnames(full_data)[6:ncol(full_data)] <- all_genes
#expressin is measured as RPKM
subset_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/gene_names.csv")
subset_genes <- subset_genes$Symbol
length(subset_genes)
setdiff( subset_genes, all_genes)
setdiff(all_genes, subset_genes)
full_data[,mean(edss), by = response_status]
full_data[,.N == length(unique(sample_id))]
patient_conditions <- full_data[,.(pid, time, response_status, edss)]
full_data[, time := as.numeric(gsub("t","",time))]
full_data_melt <- melt(full_data,
id.vars = c("pid","time","response_status"),
measure.vars = subset_genes, #subset to 70 in paper
variable.name = "gene",
value.name = "expression",
na.rm = FALSE
)
full_data_melt[is.na(expression), .N] #these need interpolation
#do interpolation for these 98 randomly missing ones
full_data_melt[,
expression_LOCF := my_LOCF(expression),
by = .(pid, gene)]
full_data_melt[, log_med_exp := log(expression_LOCF) -
median(log(expression_LOCF), na.rm = T)]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
# let's to perc_change stuff
full_data_melt[,time := time - time[1], by = pid]
full_data_melt[,exp_LOCF_perc_change :=
(exp - log_med_exp[1]),
by = .(pid, response_status, gene)]
hist(full_data_melt$log_med_exp)
hist(full_data_melt$log_med_exp)
hist(full_data_melt$log_exp_LOCF_perc_change)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_exp_LOCF_perc_change)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
full_data_melt[, log_med_exp := log(expression_LOCF) ]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
# let's to perc_change stuff
full_data_melt[,time := time - time[1], by = pid]
hist(full_data_melt$log_med_exp)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
library(data.table)
library(zoo)
library(ggplot2)
my_LOCF <- function(vec){
new_vec <- na.locf(vec, na.rm = FALSE) #LOCF
if(is.na(new_vec[1])){
new_vec[1] <- vec[2] #NOCB
}
return(new_vec)
}
full_data <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/raw_rifnb_data.csv")
all_genes <- colnames(full_data)[6:ncol(full_data)]
all_genes <- toupper(gsub("\\s","_",gsub("-|[()]","",all_genes)))
colnames(full_data)[6:ncol(full_data)] <- all_genes
#expressin is measured as RPKM
subset_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/gene_names.csv")
subset_genes <- subset_genes$Symbol
length(subset_genes)
setdiff( subset_genes, all_genes)
setdiff(all_genes, subset_genes)
full_data[,mean(edss), by = response_status]
full_data[,.N == length(unique(sample_id))]
patient_conditions <- full_data[,.(pid, time, response_status, edss)]
full_data[, time := as.numeric(gsub("t","",time))]
full_data_melt <- melt(full_data,
id.vars = c("pid","time","response_status"),
measure.vars = subset_genes, #subset to 70 in paper
variable.name = "gene",
value.name = "expression",
na.rm = FALSE
)
full_data_melt[is.na(expression), .N] #these need interpolation
#do interpolation for these 98 randomly missing ones
full_data_melt[,
expression_LOCF := my_LOCF(expression),
by = .(pid, gene)]
full_data_melt[, log_med_exp := log(expression_LOCF) -
median(log(expression_LOCF), na.rm = T)]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
# let's to perc_change stuff
full_data_melt[,time := time - time[1], by = pid]
hist(full_data_melt$log_med_exp)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_exp_LOCF_perc_change:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_exp_LOCF_perc_change"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_exp_LOCF_perc_change")
#datamat <- datamat[, .SD[1:(.N+1)],
#                   by=.(embryo, cell)][is.na(gene),
#                                       (stages_in_order) := as.list(stage_pseudo_times)]
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat
datamat
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_med_exp:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time",
"gene","log_med_exp"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_exp_LOCF_perc_change")
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_med_exp")
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat[,c("pid","response_status","gene") := NULL]
datamat
datamat <- dcast(full_data_melt,
pid + response_status + gene ~ avail_time,
value.var = "log_med_exp")
#datamat <- datamat[, .SD[1:(.N+1)],
#                   by=.(embryo, cell)][is.na(gene),
#                                       (stages_in_order) := as.list(stage_pseudo_times)]
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat
datamat[pid == "250434", gene]
write.csv(datamat[pid == "250434", gene],"C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/clean_data/gene_names.csv",row.names = F)
library(data.table)
library(ggplot2)
norm <- function(this_vec){
#exp(this_vec)/sum(exp(this_vec))
(this_vec - mean(this_vec))/sd(this_vec)
}
norm_and_abs <- function(this_vec){
#exp(this_vec)/sum(exp(this_vec))
abs((this_vec - mean(this_vec))/sd(this_vec))
}
wo_prods <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_rifnb/wo_prods.csv")
wo_sums <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_rifnb/wo_sums.csv")
alpha_comb <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_rifnb/alpha_comb.csv")
num_features <- dim(alpha_comb)[1]
num_features
hist(as.matrix(wo_sums))
hist(as.matrix(wo_prods))
gene_eff = as.matrix(wo_sums) %*%
as.matrix(alpha_comb[1:(num_features/2),]) +
as.matrix(wo_prods) %*%
as.matrix(alpha_comb[(num_features/2 + 1):num_features,])
gene_eff <- as.data.table(gene_eff)
gene_eff[,reg:= .I]
gene_eff
affected_cols <- paste0("V",1:70)
gene_eff <- melt(gene_eff,
id.vars = "reg", measure.vars = affected_cols,
variable.name = "aff", value.name = "effect")
gene_eff[,aff := gsub("V","",aff)]
gene_ef
gene_eff
cell_names <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_rifnb/gene_names.csv")
setnames(cell_names, old = "x", new = "gene")
cell_name
cell_names
gene_eff[,reg := cell_names[as.numeric(reg),gene]]
gene_eff[,aff := cell_names[as.numeric(aff),gene]]
gene-eff
gene_eff
gene_mult <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_rifnb/gene_mult.csv")
gene_mult[, multiplier := V1]
gene_mult[, gene_name := cell_names$gene]
gene_mult[, V1:= NULL]
gene_mult
hist(gene_mult$multiplier)
barplot(gene_mult$multiplier, gene_mult$gene_name)
barplot(gene_mult$multiplier~ gene_mult$gene_name)
barplot(sort(gene_mult$multiplier))
gene_mult
gene_mult[multiplier == max(multiplier)]
gene_mult[multiplier == min(multiplier)]
gene_eff[, gene_mult_of_reg := gene_mult[gene_name == reg, multiplier], by = reg]
gene_eff[, gene_mult_of_aff := gene_mult[gene_name == aff, multiplier], by = aff]
gene_eff[, effect := (effect * gene_mult_of_aff)]
gene_eff
gene_eff[, pair :=  paste(sort(c(reg, aff)), collapse = ", "),
by = .(reg, aff)]
gene_eff[,max_effect_in_pair := max(abs(effect)),by = pair]
gene_eff[,min_effect_in_pair := min(abs(effect)),by = pair]
gene_eff[abs(effect) == min_effect_in_pair, effect := 0]
gene_eff
hist(gene_eff$effect)
gene_eff
gene_eff[, mean(abs(effect))]
gene_eff[, mean(abs(effect)), by = reg]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)][1:20]
gene_eff[abs(effect) > 0.05]
gene_eff[abs(effect) > 0.05, .(reg, aff)]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)][1:20]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)][1:30]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)][1:60]
gene_eff[, mean(abs(effect)), by = reg][order(-V1)][1:10]
gene_eff[, mean(abs(effect)), by = aff][order(-V1)][1:10]
dim(wo_prods)
library(data.table)
library(zoo)
library(ggplot2)
my_LOCF <- function(vec){
new_vec <- na.locf(vec, na.rm = FALSE) #LOCF
if(is.na(new_vec[1])){
new_vec[1] <- vec[2] #NOCB
}
return(new_vec)
}
full_data <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/raw_rifnb_data.csv")
all_genes <- colnames(full_data)[6:ncol(full_data)]
all_genes <- toupper(gsub("\\s","_",gsub("-|[()]","",all_genes)))
colnames(full_data)[6:ncol(full_data)] <- all_genes
#expressin is measured as RPKM
subset_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/gene_names.csv")
subset_genes <- subset_genes$Symbol
length(subset_genes)
setdiff( subset_genes, all_genes)
setdiff(all_genes, subset_genes)
full_data[,mean(edss), by = response_status]
full_data[,.N == length(unique(sample_id))]
patient_conditions <- full_data[,.(pid, time, response_status, edss)]
full_data[, time := as.numeric(gsub("t","",time))]
full_data_melt <- melt(full_data,
id.vars = c("pid","time","response_status"),
measure.vars = subset_genes, #subset to 70 in paper
variable.name = "gene",
value.name = "expression",
na.rm = FALSE
)
full_data_melt[is.na(expression), .N] #these need interpolation
#do interpolation for these 98 randomly missing ones
full_data_melt[,
expression_LOCF := my_LOCF(expression),
by = .(pid, gene)]
full_data_melt[, log_med_exp := log(expression_LOCF) -
median(log(expression_LOCF), na.rm = T)]
full_data_melt[log_med_exp <= -8, log_med_exp := -8] #truncate small values
full_data_melt[is.na(log_med_exp)]
hist(full_data_melt$log_med_exp)
time_fake_gene <- full_data[,.(pid, response_status, time)]
time_fake_gene[, gene:= "ZZZ_time_col"]
time_fake_gene[, log_med_exp:= time]
full_data_melt <- merge(full_data_melt, time_fake_gene,
by = c("pid","response_status","time","gene","log_med_exp"),
all = T)
full_data_melt[, avail_time := paste("avail",1:.N, sep = "_"),
by = .(pid, response_status, gene)]
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
num_time <- 7
num_time <- 7
num_genes <- length(unique(datamat$gene)) - 1
num_traj <- length(unique(datamat$pid))
datamat
ggplot(full_data_melt[gene %in% c("BAX","CASPASE_1", "TYK2","STAT6")],
aes(x = time, y = log_med_exp)) +
geom_line(aes(group = pid, col = pid)) +
facet_grid(gene~ response_status)
full_data_melt
datamat
num_traj_good <- datamat[response_status == "good", length(unique(pid))]
num_traj_good
num_traj_bad <- datamat[response_status == "bad", length(unique(pid))]
num_traj_bad
datamat_good <- datamat[response_status == "good"]
datamat_bad <- datamat[response_status == "bad"]
datamat_good[,c("pid","response_status","gene") := NULL]
top_row <- as.list(rep(NA, num_time))
top_row[[1]] <- num_genes
top_row[[2]] <- num_traj_good
datamat_good <- rbind(top_row, datamat_good)
datamat_good
33*71
33*71 + 1
20*71 + 1
datamat_bad[,c("pid","response_status","gene") := NULL]
top_row <- as.list(rep(NA, num_time))
top_row[[1]] <- num_genes
top_row[[2]] <- num_traj_bad
datamat_bad <- rbind(top_row, datamat_bad)
datamat_bad
write.table( datamat_good,
"C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/clean_data/rIFNbeta_70genes_33samples_good.csv",
sep=",",
row.names = FALSE,
col.names = FALSE,
na = "")
write.table( datamat_bad,
"C:/STUDIES/RESEARCH/neural_ODE/rIFNbeta_data/clean_data/rIFNbeta_70genes_20samples_bad.csv",
sep=",",
row.names = FALSE,
col.names = FALSE,
na = "")
