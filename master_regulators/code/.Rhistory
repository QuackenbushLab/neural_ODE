score_summary[,plot(true_out, pert_score )]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score))]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score))]
score_summary[,plot(out_cent, pert_score )]
score_summary[,plot(true_out, pert_score )]
score_summary[,plot(true_out, pert_score )]
score_summary
score_summary[-order(pert_score)]
score_summary[order(-pert_score)]
score_summary[order(-pert_score)][1:20]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_in_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score))]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_in_cent, pert_score))]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_in_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[order(-pert_score)][1:20]
chief_directory <- "C:/STUDIES/RESEARCH/neural_ODE/master_regulators"
write_directory <- paste(chief_directory,"score_outputs/scores_to_save_avoid0.csv", sep = "/")
img_directory <- paste(chief_directory,"plots/inflential_genes_avoid0.png", sep = "/")
wo_prods <- fread(paste(chief_directory,"model_to_test/wo_prods.csv", sep = "/"))
bo_prods <- fread(paste(chief_directory,"model_to_test/bo_prods.csv", sep = "/"))
wo_sums <- fread(paste(chief_directory,"model_to_test/wo_sums.csv", sep = "/"))
bo_sums <- fread(paste(chief_directory,"model_to_test/bo_prods.csv", sep = "/"))
alpha_comb <- fread(paste(chief_directory,"model_to_test/alpha_comb.csv", sep = "/"))
gene_mult <- fread(paste(chief_directory,"model_to_test/gene_mult.csv", sep = "/"))
gene_names <- fread(paste(chief_directory,"model_to_test/gene_names.csv", sep = "/"))
num_genes <- dim(wo_prods)[1]
genes_in_dataset <- gene_names$x
true_edges <- fread(paste(chief_directory,"model_to_test/edge_properties.csv", sep = "/"))
true_edges[activation == T, activation_sym := "activating"]
true_edges[activation == F, activation_sym := "repressive"]
setnames(true_edges,
old = c("from","to"),
new = c("reg","aff"))
true_outgoing <- true_edges[, .(true_out = .N), by = reg]
true_incoming <- true_edges[, .(true_inc = .N), by = aff]
true_nums <- merge(true_outgoing, true_incoming,
by.x = "reg", by.y = "aff", all = T)
true_nums[is.na(true_out), true_out := 0 ]
true_nums[is.na(true_inc), true_inc := 0 ]
harmonic_cent <- fread(paste(chief_directory,"model_to_test/gene_centralities.csv", sep = "/"))
soft_sign_mod <- function(x){
shift_x <- x - 0.5
abs_shift_x <- abs(x)
ss_mod <- shift_x/(1+ abs_shift_x)
return(ss_mod)
}
log_soft_sign_mod <- function(x){
shift_x <- x - 0.5
abs_shift_x <- abs(x)
ss_mod <- shift_x/(1+ abs_shift_x)
return(log(1 + ss_mod))
}
my_neural_ode <- function(t, y, parms = NULL,...){
y_soft_sign <- soft_sign_mod(y)
y_log_soft_sign <- log_soft_sign_mod(y)
sums_part <- t(y_soft_sign%*%as.matrix(wo_sums)) + bo_sums
prods_part <- exp(t(y_log_soft_sign%*%as.matrix(wo_prods)) + bo_prods)
concat <- rbind(sums_part, prods_part)
joint = t(as.matrix(alpha_comb)) %*% as.matrix(concat)
final <- gene_mult*(joint - y)
return(list(final$V1))
}
times_to_project <- seq(0,10, by = 2)
num_iter <- 100
pert_level <- 0.50
score_matrix <- matrix(NA, nrow = num_genes, ncol = num_iter)
row.names(score_matrix) <- genes_in_dataset
run_sims
if (run_sims == T){
for (iter in 1:num_iter){
baseline_init_val <- runif(num_genes, min = 0, max = 1)
names(baseline_init_val) <- genes_in_dataset
unpert_soln <- deSolve::ode(y = baseline_init_val,
times = times_to_project,
func = my_neural_ode)
for (gene_counter in 1:num_genes){
gene <- genes_in_dataset[gene_counter]
print(paste("gene",gene_counter, "in iter", iter, "of", num_iter))
pert_init_cond <- copy(baseline_init_val)
pert_init_cond[gene] <- ifelse(runif(1) > 0.5,
pert_init_cond[gene] * (1 + pert_level),
pert_init_cond[gene] * (1 - pert_level))
this_genes_pert_soln <- deSolve::ode(y = pert_init_cond,
times = times_to_project,
func = my_neural_ode)
this_gene_score <- 10^4 * mean(abs(this_genes_pert_soln[-1,genes_in_dataset] -
unpert_soln[-1,genes_in_dataset]))
#don't consider artifically perturbed init values (t = 0)!
score_matrix[gene, iter] <- this_gene_score
}
}
#score_matrix <- data.table(score_matrix)
print("saving results now...")
write.csv(score_matrix, write_directory, row.names = T)
}else{
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
}
dim(score_matrix)
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,][order(-pert_score), ])
print("influence breakdown by input gene:")
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene:= gsub("_input","",gene)]
score_summary <- merge(score_summary,
true_nums,
by.x = "gene",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by = "gene")
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
print(score_summary[gene %in% genes_to_print,][order(-pert_score), ])
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,][order(-pert_score), ])
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene:= gsub("_input","",gene)]
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,][order(-pert_score), ])
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene:= gsub("_input","",gene)]
score_summary <- merge(score_summary,
true_nums,
by.x = "gene",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by = "gene")
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,][order(-pert_score), ])
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
true_out, out_cent)][order(-pert_score), ])
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
out_degree = out_cent,
harmonic_cent = true_out)][order(-pert_score), ])
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
harmonic_cent = true_out,
out_degree = out_cent)][order(-pert_score), ])
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene:= gsub("_input","",gene)]
score_summary <- merge(score_summary,
true_nums,
by.x = "gene",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by = "gene")
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
harmonic_cent = true_out,
out_degree = out_cent)][order(-pert_score), ])
score_summary[input_gene == T,
.(gene, input_gene, pert_score,
harmonic_cent = true_out,
out_degree = out_cent)][order(-pert_score), ]
score_summary[input_gene == T,
.(gene, input_gene, pert_score,
harmonic_cent = true_out,
out_degree = out_cent)][order(-pert_score), ][1:10]
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ])
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ])
score_summary[input_gene == T,
.(gene, input_gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ][1:10]
score_summary[input_gene == F,
.(gene, input_gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ][1:10]
true_edges[aff== "ROX1"]
score_summary[input_gene == F,
.(gene, input_gene, pert_score,
harmonic_cent = out_in_cent,
out_degree = true_out)][order(-pert_score), ][1:10]
print(score_summary[gene %in% genes_to_print,
.(gene, input_gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ])
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_in_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_in_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score),
corr_harmonic_cent = cor(out_cent, pert_score)),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, type = "spearman"),
corr_harmonic_cent = cor(out_cent, pert_score, type = "spearman")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "spearman"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "spearman")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
spearman
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "spearman"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "spearman")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "spearman"),
corr_harmonic_cent = cor(out_in_cent, pert_score, method = "spearman")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "kendall"),
corr_harmonic_cent = cor(out_in_cent, pert_score, method = "kendall")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "kendall"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "kendall")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "spearman"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "spearman")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_in_cent, pert_score, method = "pearson")),
by = input_gene]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
score_summary[,plot(out_cent, pert_score )]
score_summary[input_gene == T,plot(out_cent, pert_score )]
score_summary[input_gene == F,plot(out_cent, pert_score )]
score_summary[input_gene == F,plot(out_in_cent, pert_score )]
score_summary[input_gene == F,plot(out_cent, pert_score )]
score_summary[input_gene == F,plot(true_out, pert_score )]
score_summary[input_gene == F,plot(out_cent, pert_score )]
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
print("")
print("Making influence plots")
boxplot_data <- score_matrix[genes_to_print,]
boxplot_data$gene <- row.names(boxplot_data)
boxplot_data <- data.table(boxplot_data)
boxplot_data <- melt(boxplot_data, id.vars = "gene",
measure.vars =  paste("V",1:num_iter, sep = ""),
variable.name = "sim_iter",
value.name = "perturb_score")
ggplot(boxplot_data, aes(x = factor(gene,
levels = genes_to_print),
y = perturb_score)) +
geom_boxplot(fill = "dodgerblue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("most influential genes")
genes_to_print
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene_short:= gsub("_input","",gene)]
score_summary <- merge(score_summary,
true_nums,
by.x = "gene_short",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by = "gene_short")
score_sd <- score_summary[, sd(pert_score)]
score_summary
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene_short:= gsub("_input","",gene)]
score_summary
score_summary <- merge(score_summary,
true_nums,
by.x = "gene_short",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by = "gene_short")
score_matrix <-  read.csv(write_directory)
row.names(score_matrix) <- score_matrix$X
score_matrix <- score_matrix[,-1]
print("")
print("top-most influential genes (2 SDs away) are:")
score_summary <- data.table(gene = genes_in_dataset, pert_score = rowMedians(as.matrix(score_matrix)))
score_summary[,input_gene := grepl("_input",gene)]
score_summary[, gene_short:= gsub("_input","",gene)]
score_summary <- merge(score_summary,
true_nums,
by.x = "gene_short",
by.y = "reg")
score_summary <-merge(score_summary,
harmonic_cent,
by.x = "gene_short",
by.y = "gene")
score_sd <- score_summary[, sd(pert_score)]
genes_to_print <- score_summary[pert_score > 2*score_sd,][order(-pert_score), gene]
print(score_summary[gene %in% genes_to_print,
.(gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ])
print("")
print("influence breakdown by input gene:")
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
print("")
print("Making influence plots")
boxplot_data <- score_matrix[genes_to_print,]
boxplot_data$gene <- row.names(boxplot_data)
boxplot_data <- data.table(boxplot_data)
boxplot_data <- melt(boxplot_data, id.vars = "gene",
measure.vars =  paste("V",1:num_iter, sep = ""),
variable.name = "sim_iter",
value.name = "perturb_score")
ggplot(boxplot_data, aes(x = factor(gene,
levels = genes_to_print),
y = perturb_score)) +
geom_boxplot(fill = "dodgerblue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("most influential genes")
score_matrix["UME6"]
score_matrix
score_matrix["UME6",]
score_matrix["UME6_inpu",]
score_matrix["UME6_input",]
which(score_matrix["UME6_input",] < 10)
score_matrix["UME6_input","V34"]
score_matrix[,"V34"]
hist(score_matrix[,"V34"] )
which(score_matrix[,"V34"] > 100)
row.names(score_matrix)
row.names(score_matrix)[which(score_matrix[,"V34"] > 100)]
print(score_summary[gene %in% genes_to_print,
.(gene, pert_score,
harmonic_cent = out_cent,
out_degree = true_out)][order(-pert_score), ])
row.names(score_matrix)[which(score_matrix[,"V34"] > 100)]
score_matrix["UME6",]
data.table(UME_6 = score_matrix["UME6_input",], REB_1 = score_matrix["REB1_input",])
data.table(UME_6 = score_matrix["UME6_input",],
REB_1 = score_matrix["REB1_input",])
data.table(UME_6 = as.vector(score_matrix["UME6_input",]),
REB_1 = as.vector(score_matrix["REB1_input",]) )
data.table(UME_6 = as.vector(score_matrix["UME6_input",]))
score_matrix["UME6",]
as.numeric(score_matrix["UME6",])
data.table(UME_6 = as.numeric(score_matrix["UME6_input",]),
REB_1 = as.numeric(score_matrix["REB1_input",]) )
X = data.table(UME_6 = as.numeric(score_matrix["UME6_input",]),
REB_1 = as.numeric(score_matrix["REB1_input",]) )
X[34,]
X[,plot(UME_6, REB_1)]
X = data.table(UME_6 = as.numeric(score_matrix["UME6_input",]),
ABF_1 = as.numeric(score_matrix["ABF1_input",]) )
X
X[,plot(UME_6, ABF_1)]
X[,cor(UME_6, ABF_1)]
X = data.table(UME_6 = as.numeric(score_matrix["UME6_input",]),
REB_1 = as.numeric(score_matrix["REB1_input",]) )
X[,cor(UME_6, REB_1)]
true_edges[reg == "UME6_input"]
true_edges[reg == "UME6"]
true_edges[reg == "UME6", aff]
true_edges[reg == "ABF1", aff]
overlap_finder <- function(x, y){intersect(true_edges[reg == x, aff],true_edges[reg == y, aff])}
overlap_finder("UME6","REB1")
overlap_finder("UME6","ABF1")
overlap_finder("UME6","TUP1")
row.names(score_matrix)[which(score_matrix[,"V34"] > 100)]
overlap_finder("UME6","ABF1")
overlap_finder("UME6","GLN3")
overlap_finder("UME6","REB1")
overlap_finder("UME6","TUP1")
score_matrix[which(score_matrix[,"V34"] > 100)
]
which(score_matrix[,"V34"] > 100)
score_matrix[34, c(1,21,39,64)]
score_matrix[c(1,21,39,64), 34]
row.names(score_matrix)[which(score_matrix[,"V34"] > 100)]
overlap_finder("UME6","REB1")
score_summary[,.(mean_score = mean(pert_score),
sd_score = sd(pert_score),
corr_out_degree =  cor(true_out, pert_score, method = "pearson"),
corr_harmonic_cent = cor(out_cent, pert_score, method = "pearson")),
by = input_gene]
