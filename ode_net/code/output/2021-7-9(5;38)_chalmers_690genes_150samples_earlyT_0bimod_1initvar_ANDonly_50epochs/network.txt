ODENet(
  (net_sums): Sequential(
    (activation_0): Softsign()
    (linear_1): Linear(in_features=690, out_features=150, bias=True)
    (activation_1): Softsign()
    (linear_out): Linear(in_features=150, out_features=690, bias=True)
  )
)


    def forward(self, t, y):
        #eps = 10**-4
        #y = torch.nn.functional.threshold(y, threshold = eps, value = eps)
        #prods = torch.exp(self.net_prods(torch.log(y))) 
        #prods_with_signs = prods * torch.tanh(self.prod_signs)
        sums = self.net_sums(y)
        
        #alpha = torch.sigmoid(self.model_weights)
        #joint =  (1-alpha)*prods + alpha*sums

        final = torch.relu(self.gene_multipliers)*(sums  - y) 
        return(final) 
