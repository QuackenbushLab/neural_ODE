ODENet(
  (net_prods): Sequential(
    (activation_0): LogShiftedSoftSignMod()
    (linear_out): Linear(in_features=6175, out_features=100, bias=True)
  )
  (net_sums): Sequential(
    (activation_0): SoftsignMod()
    (linear_out): Linear(in_features=6175, out_features=100, bias=True)
  )
  (net_alpha_combine): Sequential(
    (linear_out): Linear(in_features=100, out_features=6175, bias=False)
  )
)


    def forward(self, t, y):
        sums = self.net_sums(y)
        #prods_part = self.net_prods(y)
        #if torch.any(torch.isnan(prods_part)):
        #    print("we got prods problems!")
        #    print(torch.topk(y, 20, largest = False))
        #prods = torch.exp(prods_part)
        #sums_prods_concat = torch.cat((sums, prods), dim= - 1)
        #joint = self.net_alpha_combine(sums_prods_concat)
        #joint_relu = torch.relu(joint + 5) - 5
        joint = self.net_alpha_combine(sums)
        final = torch.relu(self.gene_multipliers)*(joint - y ) 
        #final = joint - y
        return(final) 
