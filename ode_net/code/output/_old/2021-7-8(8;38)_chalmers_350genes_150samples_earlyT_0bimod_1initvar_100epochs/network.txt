ODENet(
  (net_prods): Sequential(
    (linear_1): Linear(in_features=350, out_features=35, bias=True)
    (activation_1): Softplus(beta=-1, threshold=20)
    (linear_out): Linear(in_features=35, out_features=350, bias=True)
  )
  (net_sums): Sequential(
    (activation_0): Softsign()
    (linear_1): Linear(in_features=350, out_features=35, bias=True)
    (activation_1): Softsign()
    (linear_out): Linear(in_features=35, out_features=350, bias=True)
  )
)


    def forward(self, t, y):
        eps = 10**-4
        y = torch.nn.functional.threshold(y, threshold = eps, value = eps)
        prods = torch.exp(self.net_prods(torch.log(y))) 
        #prods_with_signs = prods * torch.tanh(self.prod_signs)
        sums = self.net_sums(y)
        
        alpha = torch.sigmoid(self.model_weights)
        joint =  (1-alpha)*prods + alpha*sums

        final = torch.relu(self.gene_multipliers)*(joint  - y) 
        return(final) 
