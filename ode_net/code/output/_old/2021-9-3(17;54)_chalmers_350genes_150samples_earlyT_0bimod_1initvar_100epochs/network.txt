ODENet(
  (net_prods): Sequential(
    (activation_0): LogShiftedSoftSignMod()
    (linear_out): Linear(in_features=350, out_features=25, bias=True)
  )
  (net_sums): Sequential(
    (activation_0): SoftsignMod()
    (linear_out): Linear(in_features=350, out_features=25, bias=True)
  )
  (net_alpha_combine): Sequential(
    (linear_out): Linear(in_features=50, out_features=350, bias=False)
  )
)


    def forward(self, t, y):
        sums = self.net_sums(y)
        prods = torch.exp(self.net_prods(y))
        sums_prods_concat = torch.cat((sums, prods), dim= - 1)
        joint = self.net_alpha_combine(sums_prods_concat)
        #alpha = torch.sigmoid(self.model_weights)
        #joint =  (1-alpha)*prods + alpha*sums
        final = torch.relu(self.gene_multipliers)*(joint  - y) 
        return(final) 
