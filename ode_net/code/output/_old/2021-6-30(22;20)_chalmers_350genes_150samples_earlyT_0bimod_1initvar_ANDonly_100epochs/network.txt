ODENet(
  (net_prods): Sequential(
    (linear_1): Linear(in_features=350, out_features=75, bias=True)
    (activation_1): Softplus(beta=1, threshold=20)
    (linear_out): Linear(in_features=75, out_features=350, bias=True)
  )

  (net_gene_weights): Sequential(
    (linear_out): Linear(in_features=350, out_features=350, bias=True)
    (activation_0): Sigmoid()
  )
)


    def forward(self, t, y):
        eps = 10**-4
        y = torch.nn.functional.threshold(y, threshold = eps, value = eps)
        prods = torch.exp(self.net_prods(torch.log(y))) 
        gene_weights = self.net_gene_weights(y)
        final = gene_weights*(prods - y) #+sums
        return(final) 
