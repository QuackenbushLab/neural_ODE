ODENet(
  (net_sums): Sequential(
    (activation_0): Sigmoid()
    (linear_out): Linear(in_features=1135, out_features=100, bias=True)
  )
  (net_alpha_combine): Sequential(
    (linear_out): Linear(in_features=100, out_features=1135, bias=False)
  )
)


    def forward(self, t, y):
        carry_cap = torch.relu(self.gene_multipliers)*16
        final = 1/12*y*(1 - y/carry_cap) 
        return(final) 
