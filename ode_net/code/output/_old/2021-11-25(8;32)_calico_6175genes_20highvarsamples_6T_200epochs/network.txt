ODENet(
  (net_sums): Sequential(
    (activation_0): SoftsignMod()
    (linear_out): Linear(in_features=6175, out_features=120, bias=True)
  )
  (net_alpha_combine): Sequential(
    (linear_out): Linear(in_features=120, out_features=6175, bias=False)
  )
)


    def forward(self, t, y):
        shift = 0.5
        #relu_gm = torch.relu(self.gene_multipliers) + 0.1 
        shifted_input = y- shift
        sums = self.net_sums(shifted_input)
        #prods = torch.exp(self.net_prods(y))
        #sums_prods_concat = torch.cat((sums, prods), dim= - 1)
        #joint = self.net_alpha_combine(sums_prods_concat)
        joint = self.net_alpha_combine(sums)
        carry_cap = torch.sigmoid(joint)
        final =  y*(torch.sigmoid(carry_cap - y)  - 0.5)
        #final = torch.relu(self.gene_multipliers)*(joint - y)
        #final = joint - y
        return(final) 
