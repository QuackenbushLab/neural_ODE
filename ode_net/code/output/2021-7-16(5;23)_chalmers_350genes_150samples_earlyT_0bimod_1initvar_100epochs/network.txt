ODENet(
  (net_prods_act): Sequential(
    (linear_1): Linear(in_features=350, out_features=40, bias=True)
    (activation_1): LogSigmoid()
    (linear_out): Linear(in_features=40, out_features=350, bias=True)
  )
  (net_prods_rep): Sequential(
    (linear_1): Linear(in_features=350, out_features=40, bias=True)
    (activation_1): Sigmoid()
  )
  (net_prods_rep_2): Sequential(
    (linear_out): Linear(in_features=40, out_features=350, bias=True)
  )
)


    def forward(self, t, y):
        eps = 10**-4
        y = torch.relu(y) + eps
        grad_activate = self.net_prods_act(torch.log(y))
        prods_reppress = torch.log(1-self.net_prods_rep(torch.log(y)))
        grad_repress = self.net_prods_rep_2(prods_reppress)
        prods = torch.exp(grad_activate + grad_repress)
        final = torch.relu(self.gene_multipliers)*(prods  - y) 
        return(final) 
