ODENet(
  (net_prods): Sequential(
    (activation_0): SoftsignMod()
    (linear_1): Linear(in_features=384, out_features=75, bias=True)
    (activation_1): SoftsignMod()
    (linear_2): Linear(in_features=75, out_features=75, bias=True)
    (activation_2): PseudoSquare()
    (linear_out): Linear(in_features=75, out_features=384, bias=True)
  )
  (net_sums): Sequential(
    (activation_0): SoftsignMod()
    (linear_1): Linear(in_features=384, out_features=75, bias=True)
    (activation_1): SoftsignMod()
    (linear_out): Linear(in_features=75, out_features=384, bias=True)
  )
)


    def forward(self, t, y):
        prods = self.net_prods(y)
        sums = self.net_sums(y)
        alpha = torch.sigmoid(self.model_weights)
        joint =  (1-alpha)*prods + alpha*sums
        final = torch.relu(self.gene_multipliers)*(joint  - y) 
        return(final) 
