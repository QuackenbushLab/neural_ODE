ODENet(
  (net_sums): Sequential(
    (linear_1): Linear(in_features=350, out_features=75, bias=True)
    (activation_1): Sigmoid()
    (linear_out): Linear(in_features=75, out_features=350, bias=True)
  )
)


    def forward(self, t, y):
        eps = 10**-3
        y = torch.relu(y) + eps
        sums = self.net_sums(torch.log(y))
        final = torch.relu(self.gene_multipliers)*(sums  - y) 
        return(final) 
