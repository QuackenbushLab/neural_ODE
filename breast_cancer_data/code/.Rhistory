edges <- merge(edges, long_val,
by = c("from", "to"),
all.x = T)
edges[is.na(val_pred), val_pred := 0]
PRROC_obj <- roc.curve(scores.class0 = edges$prior_pred,
weights.class0 = edges$val_pred,
curve=FALSE)
print(paste(num_genes,
"genes, AUC = ",
round(PRROC_obj$auc, 3),
", num vals found =",
edges[val_pred==1, .N]))
}
13/123
15/185
library(data.table)
library(stringr)
### will want genes to also have prior info so...
long_prior <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/otter_clean_harmonized_full_prior_er_pos.csv")
all_prior_affiliated_genes <- unique(c(long_prior$from, long_prior$to))
### start cleaning
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Breast cancer-ER subtypes/er=1/er1_Ordered_Data.csv")
full_data <- full_data[-.N] #remove grade row
setnames(full_data, "V1", "gene")
gene_names <- full_data[, .(gene)]
full_data <- full_data[!is.na(gene) & gene != "", ]
full_data <- full_data[,.SD[1], by = gene]
exprs_cols <- setdiff(names(full_data),"gene")
full_data_melt <- melt(full_data,
id.vars = "gene",
measure.vars = exprs_cols,
variable.name = "time_point",
value.name = "exprs")
full_data_melt[, hist(exprs)]
num_genes <- 500
high_var_genes <- full_data_melt[,var(exprs), by = gene][order(-V1)]
high_var_genes[, gene_in_prior:= gene %in% all_prior_affiliated_genes]
high_var_genes <- high_var_genes[gene_in_prior ==T, ][1:num_genes,gene]
full_data <- full_data[gene %in% high_var_genes]
full_data <- full_data[order(gene)]
genes_names_to_save <- full_data[, .(gene)]
full_data[, gene := NULL]
full_data <- full_data/15 #NORMALIZE to 0-1
time_vals <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Breast cancer-ER subtypes/er=1/er1_Temporal_Progression.csv")
names(time_vals) <- c("pid", "latent_time")
time_val_row <- lapply(exprs_cols, function(x){10*time_vals[pid==x, latent_time]})
time_val_row
time_val_row <- sapply(exprs_cols, function(x){10*time_vals[pid==x, latent_time]})
length(time_val_row)
plot(time_val_row)
time_val_row <- sapply(exprs_cols, function(x){time_vals[pid==x, latent_time]})
plot(time_val_row)
plot(time_val_row)
hist(time_val_row)
max(time_val_row)
hist(time_val_row/max(time_val_row))
D <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/LatantTime.csv")
D
D[1,]
hist(D[1,])
as.matrix(D)
hist(as.matrix(D[1,]))
hist(time_val_row/max(time_val_row))
hist(as.matrix(D[1,]))
hist(as.matrix(D[1,]))
hist(time_val_row/max(time_val_row))
###
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_data
dim(full_data)
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv")
full_genes
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
dim(full_data)
dim(full_genes)
full_data <- cbind(full_genes, full_data)
dim(full_data)
names(full_data)
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
full_genes
names(full_genes) <- c("gene")
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
names(full_data)
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
### marker genes
marker_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/breast_cancer_data/clean_data/desmedt_gene_names_2000.csv")
marker_genes
marker_genes <- marker_genes$gene
marker_genes
marker_genes
dim(marker_genes)
### get ER pos data
erpos_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Breast cancer-ER subtypes/er=1/er1_Ordered_Data.csv")
erpos_data <- erpos_data[-.N] #remove grade row
setnames(erpos_data, "V1", "gene")
erpos_data
dim(erpos_data)
erpos_data
dim(erpos_data)
dim(erpos_data[gene %in% marker_genes])
erpos_data <- erpos_data[gene %in% marker_genes]
dim(erpos_data)
erpos_data
full_data
dim(full_data)
### marker genes
marker_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/breast_cancer_data/clean_data/desmedt_gene_names_2000.csv")
marker_genes <- marker_genes$gene #2000 marker genes
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
full_data[gene %in% marker_genes]
dim(full_data[gene %in% marker_genes])
full_data[, .N, by = gene]
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
full_data <- full_data[!is.na(gene) & gene != "", ]
full_data <- full_data[,.SD[1], by = gene]
dim(full_data)
full_data
full_data <- full_data[gene %in% marker_genes]
dim(full_data)
full_data
full_data$gene
erpos_data$gene
erpos_data
names(erpos_data)
names(erpos_data)
tail(names(erpos_data), -1)
### asdasd
sample_ids <- tail(names(erpos_data), -1)
sample_ids
sample_ids
this_sample <- sample_ids[1]
this_sample
erpos_data[,this_sample]
this_sample <- sample_ids[1]
this_sample
erpos_data[,this_sample]
erpos_data[[this_sample]]
length(erpos_data[[this_sample]])
this_sample_erpos_exprs <- erpos_data[[this_sample]]
hist(this_sample_erpos_exprs)
full_data
paste("V", 1:186)
full_data_exprs_cols <- paste("V", 1:186, collapse = "")
full_data_exprs_cols
paste0("V", 1:186)
full_data_exprs_cols <- paste0("V", 1:186)
this_sample_erpos_exprs
full_data <- full_data[order(gene)]
erpos_data <- erpos_data[order(gene)]
full_data$gene
full_data$gene == erpos_data$gene
all(full_data$gene == erpos_data$gene)
### asdasd
all(full_data$gene == erpos_data$gene)
sample_ids <- tail(names(erpos_data), -1)
full_data_exprs_cols <- paste0("V", 1:186)
this_sample <- sample_ids[1]
this_sample_erpos_exprs <- erpos_data[[this_sample]]
this_sample_erpos_exprs
full_data[,lapply(.SD, function(vec){corr(vec, this_sample_erpos_exprs)}),]
full_data[,lapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),]
full_data[,lapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]
full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]
hist(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]
max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
full_data$V1
cor(full_data$V1, this_sample_erpos_exprs)
plot(full_data$V1, this_sample_erpos_exprs)
plot(full_data$V1, this_sample_erpos_exprs, xlab = "x", ylab = "y")
plot(full_data$V1, this_sample_erpos_exprs, xlab = "x", ylab = "y")
abline(0,1, col = "red")
this_sample <- sample_ids[3]
this_sample_erpos_exprs <- erpos_data[[this_sample]]
which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
this_sample <- sample_ids[3]
this_sample_erpos_exprs <- erpos_data[[this_sample]]
which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
this_sample <- sample_ids[7]
this_sample_erpos_exprs <- erpos_data[[this_sample]]
which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])
name(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
names(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
names(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_match <- names(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
print(paste0(this_sample," = ",best_match ))
### find best matches
all(full_data$gene == erpos_data$gene)
sample_ids <- tail(names(erpos_data), -1)
full_data_exprs_cols <- paste0("V", 1:186)
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_match <- names(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
print(paste0(this_sample," = ",best_match ))
}
names((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3)
names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste0(this_sample," = ",best_matches ))
print(paste(this_sample," = ",best_matches ))
print(paste(this_sample," = ",best_matches ))
print(paste(this_sample,best_matches))
print(paste(this_sample,best_matches))
print(paste(this_sample,best_matches, sep = "_"))
print(paste(this_sample,best_matches, sep = "_"))
print(paste(this_sample,paste(best_matches, sep = "_")))
print(paste(this_sample,paste0(best_matches, sep = "_")))
print(paste(this_sample,paste0(best_matches, collapse = "_")))
print(paste(this_sample,"=",paste0(best_matches, collapse = "_")))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
}
### marker genes
marker_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/breast_cancer_data/clean_data/desmedt_gene_names_4000.csv")
marker_genes <- marker_genes$gene #2000 marker genes
### get full_data
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
full_data <- full_data[!is.na(gene) & gene != "", ]
full_data <- full_data[,.SD[1], by = gene]
full_data <- full_data[gene %in% marker_genes]
full_data <- full_data[order(gene)]
### get ER pos data
erpos_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Breast cancer-ER subtypes/er=1/er1_Ordered_Data.csv")
erpos_data <- erpos_data[-.N] #remove grade row
setnames(erpos_data, "V1", "gene")
erpos_data <- erpos_data[gene %in% marker_genes]
erpos_data <- erpos_data[order(gene)]
### find best matches
all(full_data$gene == erpos_data$gene)
sample_ids <- tail(names(erpos_data), -1)
full_data_exprs_cols <- paste0("V", 1:186)
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
}
this_sample_erpos_exprs
knitr::opts_chunk$set(echo = TRUE, comment=NA)
solution = FALSE
2+3*4
2+3*4
2+3*4
2+(3*4)
(2+3)*4
2+3*4
2+(3*4)
(2+3)*4
(15/3)*5-2
clear
2+2
2+2
2+7
3+8
3-3
2+7
x = 3
y = 77
hist(sample(1:1000, 500))
hist(sample(1:1000, 500), col = "lightblue")
x=3
x=3
y = 6
x+y
z = 19
plot(1,1)
x = 3
x = 3 #I AM SETTING THE VALUE OF X TO BE 3 HERE
x = 3 I AM SETTING THE VALUE OF X TO BE 3 HERE
2+3*4
2+(3*4)
(2+3)*4
2+3*4
2+(3*4)
(2+3)*4
(15/3)*5-2
x =5
y = 3
x+y
x-y
X+Y-2
X = 55
x+y-2
x*y
x/y
x
y
x = 7
y = 3
x+y
x-y
x+y-2
x*y
x/y
x = 5
x+4
x = x+4
x+y
x-y
x+y-2
x*y
x/y
y = 8
x+y
x-y
x+y-2
x*y
x/y
Z = 8
Z = 8
rm(Z)
g = 9.81
z = "z is a string variable."
z
inte_var = "Intekhab"
inte_var = "Intekhab teaches statstart"
inte_var = "Intekhab teaches statstart"
my_location <-  "Boston, MA"
my_location <-  "Colombia"
z123_myvar_ASD = 3
z123_myvar_ASD = 39999
z123_myvar_ASD = 39999
1+2
name = "Intekhab Hossain"
name = "Intekhab Hossain"
name = "Intekhab Hossain"
1+2
name = "Intekhab Hossain"
name = 'Intekhab Hossain'
name1 = 'Boston'
name2 = "California"
name = -7
abs(-13)
abs(name)
sum(6,5)
x = 3
sum(x, name)
sum(x, 9)
sum(1,2,3,4,5)
tolower(name1)
name1
toupper(name1)
name = 'Intekhab Hossain'
name = 'Intekhab Hossain'
topper(name)
toupper(name)
name_upper = toupper(name)
sum(abs(-5),14)
sum(abs(-5),14)
abs(sum(-5,14))
tolower("I <3 YOU")
address <- "102 Palm St, Boston, MA 02134"
address <- "102 Palm St, Boston, MA 02134"
tolower(address)
x <- 3
x <- 3
y <- 5
z <- "4"
x+y
x+z
z <- "4"
w <- 4
temp <- "cheese"
temp2 <- "burger"
paste0(temp,temp2)
temp2 <- paste0(toupper(temp),temp2)
temp3 <- "pizza"
paste0(temp3,temp2)
temp2
temp3
paste0(temp3)
paste0(temp3)
paste0(street, city, zip)
street <- "102 Palm St "
city <- "Boston "
zip <- "02134"
paste0(street, city, zip)
my_final_addess = paste0(street, city, zip)
my_final_adess
my_final_address = paste0(street, city, zip)
my_final_address
3 == 3
x
x ==3
y == 3
y
x==y
x == 3
x == 3
y = 3
x==y
y = 5
x==y
5 > 3
5 > 13
5 < 13
x
5 > x
x
x >= 3
x >= 4
"apple" == "orange"
"apple" == "Apple"
"apple" == "apple"
name
name == "apple"
(5*34) + 6
(5*34) + 6 > 1000
answer <- 5<6
answer = 5<6
result_of_my_check = 5<6
"apple" > 5
"apple" > 5
"apple" < 5
"apple" < 1
"apple" < 0
"apple" > 0
"apple" > 5
"apple" > 666
numbers <- c(0,1,4,-5,7,50)
numbers
names <- c("Intekhab","Jonathan","Amy","Stephanie")
names
names
tolower(names)
vec1 <- c(0,1,2,3,4,5)
vec2 <- (0, 10, 20, 30, 40, 50)
vec1 <- c(0,1,2,3,4,5)
vec2 <- c(0, 10, 20, 30, 40, 50)
vec3 <- c(vec1, vec2)
vec3
clear
vec1
vec2
vec1 + vec2
vec1 * vec2
vec1 / vec2
vec1
vec2
vec1 / vec2
is.na(vec1 / vec2)
vec1/vec2
ifllse(is.na(vec1/vec2), "", vec1/vec2)
ifelse(is.na(vec1/vec2), "", vec1/vec2)
vec1/vec2
vec1 < 3
vec1
vec1 < 3
vec1 < vec2
vec1
vec2
mixed_vec <- c(5,"dog",7)
mixed_vec
mixed_vec <- c(5, "dog", 7)
mixed_vec
mixed_vec + 5
mixed_vec
numbers <- c(0,1,4,-5,7,50)
names <- c("Intekhab","Jonathan","Amy","Stephanie")
names_numbers <- c(names, numbers)
names_numbers
numbers
names
5 % 5
