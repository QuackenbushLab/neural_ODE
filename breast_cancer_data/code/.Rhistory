.SDcols = full_data_exprs_cols]))
print(paste0(this_sample," = ",best_match ))
### find best matches
all(full_data$gene == erpos_data$gene)
sample_ids <- tail(names(erpos_data), -1)
full_data_exprs_cols <- paste0("V", 1:186)
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_match <- names(which.max(full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
print(paste0(this_sample," = ",best_match ))
}
names((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols]))
tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3)
names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste0(this_sample," = ",best_matches ))
print(paste(this_sample," = ",best_matches ))
print(paste(this_sample," = ",best_matches ))
print(paste(this_sample,best_matches))
print(paste(this_sample,best_matches))
print(paste(this_sample,best_matches, sep = "_"))
print(paste(this_sample,best_matches, sep = "_"))
print(paste(this_sample,paste(best_matches, sep = "_")))
print(paste(this_sample,paste0(best_matches, sep = "_")))
print(paste(this_sample,paste0(best_matches, collapse = "_")))
print(paste(this_sample,"=",paste0(best_matches, collapse = "_")))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
}
### marker genes
marker_genes <- fread("C:/STUDIES/RESEARCH/neural_ODE/breast_cancer_data/clean_data/desmedt_gene_names_4000.csv")
marker_genes <- marker_genes$gene #2000 marker genes
### get full_data
full_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Data_smooth_allgenes.csv")
full_genes <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/GeneNames.csv", header = F)
names(full_genes) <- c("gene")
full_data <- cbind(full_genes, full_data)
full_data <- full_data[!is.na(gene) & gene != "", ]
full_data <- full_data[,.SD[1], by = gene]
full_data <- full_data[gene %in% marker_genes]
full_data <- full_data[order(gene)]
### get ER pos data
erpos_data <- fread("C:/STUDIES/RESEARCH/ODE_project_local_old/breast_cancer_data/Breast cancer-ER subtypes/er=1/er1_Ordered_Data.csv")
erpos_data <- erpos_data[-.N] #remove grade row
setnames(erpos_data, "V1", "gene")
erpos_data <- erpos_data[gene %in% marker_genes]
erpos_data <- erpos_data[order(gene)]
### find best matches
all(full_data$gene == erpos_data$gene)
sample_ids <- tail(names(erpos_data), -1)
full_data_exprs_cols <- paste0("V", 1:186)
for (this_sample in sample_ids){
this_sample_erpos_exprs <- erpos_data[[this_sample]]
best_matches <- names(tail(sort((full_data[,sapply(.SD, function(vec){cor(vec, this_sample_erpos_exprs)}),
.SDcols = full_data_exprs_cols])), 3))
print(paste(this_sample,"=",paste0(best_matches, collapse = ", ")))
}
this_sample_erpos_exprs
knitr::opts_chunk$set(echo = TRUE, comment=NA)
solution = FALSE
2+3*4
2+3*4
2+3*4
2+(3*4)
(2+3)*4
2+3*4
2+(3*4)
(2+3)*4
(15/3)*5-2
clear
2+2
2+2
2+7
3+8
3-3
2+7
x = 3
y = 77
hist(sample(1:1000, 500))
hist(sample(1:1000, 500), col = "lightblue")
x=3
x=3
y = 6
x+y
z = 19
plot(1,1)
x = 3
x = 3 #I AM SETTING THE VALUE OF X TO BE 3 HERE
x = 3 I AM SETTING THE VALUE OF X TO BE 3 HERE
2+3*4
2+(3*4)
(2+3)*4
2+3*4
2+(3*4)
(2+3)*4
(15/3)*5-2
x =5
y = 3
x+y
x-y
X+Y-2
X = 55
x+y-2
x*y
x/y
x
y
x = 7
y = 3
x+y
x-y
x+y-2
x*y
x/y
x = 5
x+4
x = x+4
x+y
x-y
x+y-2
x*y
x/y
y = 8
x+y
x-y
x+y-2
x*y
x/y
Z = 8
Z = 8
rm(Z)
g = 9.81
z = "z is a string variable."
z
inte_var = "Intekhab"
inte_var = "Intekhab teaches statstart"
inte_var = "Intekhab teaches statstart"
my_location <-  "Boston, MA"
my_location <-  "Colombia"
z123_myvar_ASD = 3
z123_myvar_ASD = 39999
z123_myvar_ASD = 39999
1+2
name = "Intekhab Hossain"
name = "Intekhab Hossain"
name = "Intekhab Hossain"
1+2
name = "Intekhab Hossain"
name = 'Intekhab Hossain'
name1 = 'Boston'
name2 = "California"
name = -7
abs(-13)
abs(name)
sum(6,5)
x = 3
sum(x, name)
sum(x, 9)
sum(1,2,3,4,5)
tolower(name1)
name1
toupper(name1)
name = 'Intekhab Hossain'
name = 'Intekhab Hossain'
topper(name)
toupper(name)
name_upper = toupper(name)
sum(abs(-5),14)
sum(abs(-5),14)
abs(sum(-5,14))
tolower("I <3 YOU")
address <- "102 Palm St, Boston, MA 02134"
address <- "102 Palm St, Boston, MA 02134"
tolower(address)
x <- 3
x <- 3
y <- 5
z <- "4"
x+y
x+z
z <- "4"
w <- 4
temp <- "cheese"
temp2 <- "burger"
paste0(temp,temp2)
temp2 <- paste0(toupper(temp),temp2)
temp3 <- "pizza"
paste0(temp3,temp2)
temp2
temp3
paste0(temp3)
paste0(temp3)
paste0(street, city, zip)
street <- "102 Palm St "
city <- "Boston "
zip <- "02134"
paste0(street, city, zip)
my_final_addess = paste0(street, city, zip)
my_final_adess
my_final_address = paste0(street, city, zip)
my_final_address
3 == 3
x
x ==3
y == 3
y
x==y
x == 3
x == 3
y = 3
x==y
y = 5
x==y
5 > 3
5 > 13
5 < 13
x
5 > x
x
x >= 3
x >= 4
"apple" == "orange"
"apple" == "Apple"
"apple" == "apple"
name
name == "apple"
(5*34) + 6
(5*34) + 6 > 1000
answer <- 5<6
answer = 5<6
result_of_my_check = 5<6
"apple" > 5
"apple" > 5
"apple" < 5
"apple" < 1
"apple" < 0
"apple" > 0
"apple" > 5
"apple" > 666
numbers <- c(0,1,4,-5,7,50)
numbers
names <- c("Intekhab","Jonathan","Amy","Stephanie")
names
names
tolower(names)
vec1 <- c(0,1,2,3,4,5)
vec2 <- (0, 10, 20, 30, 40, 50)
vec1 <- c(0,1,2,3,4,5)
vec2 <- c(0, 10, 20, 30, 40, 50)
vec3 <- c(vec1, vec2)
vec3
clear
vec1
vec2
vec1 + vec2
vec1 * vec2
vec1 / vec2
vec1
vec2
vec1 / vec2
is.na(vec1 / vec2)
vec1/vec2
ifllse(is.na(vec1/vec2), "", vec1/vec2)
ifelse(is.na(vec1/vec2), "", vec1/vec2)
vec1/vec2
vec1 < 3
vec1
vec1 < 3
vec1 < vec2
vec1
vec2
mixed_vec <- c(5,"dog",7)
mixed_vec
mixed_vec <- c(5, "dog", 7)
mixed_vec
mixed_vec + 5
mixed_vec
numbers <- c(0,1,4,-5,7,50)
names <- c("Intekhab","Jonathan","Amy","Stephanie")
names_numbers <- c(names, numbers)
names_numbers
numbers
names
5 % 5
4.484634e-04/8.891226e-05
library(data.table)
library(PRROC)
edges <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/edge_properties.csv")
edges <- edges[, .(from, to, activation)]
genes <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/gene_names.csv")
genes[ ,x:= gsub("_input","",x)]
genes[, gene_sl := .I]
num_genes <- genes[,.N]
edges <- merge(edges, genes, by.x = "from", by.y = "x")
edges[, from := gene_sl]
edges[, gene_sl:= NULL]
edges <- merge(edges, genes, by.x = "to", by.y = "x")
edges[, to := gene_sl]
edges[, gene_sl:= NULL]
edges[, true_edge := 1]
all_pos_edges <- data.table(expand.grid(1:num_genes, 1:num_genes))
names(all_pos_edges) <- c("to", "from")
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, true_edge)],
by = c("to","from"),
all.x = T)
edges[, true_edge := NULL]
noise <- 0.05
noise_perc <- noise/0.5
edges[,activation := as.integer(2*(activation - 0.5))]
edges[, edge_to_flip:= 0]
edges[, edge_to_reloc := 0]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_flip := 1]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_reloc := 1]
reloc_edge <- function(to, from, activation){
#change edge location
return(as.list(
c(
as.integer(sample(1:num_genes,2, replace = F)),
as.integer(activation))
)
)
}
#MUTATE edges
edges[edge_to_reloc ==1,
c("to", "from", "activation"):=
reloc_edge(to, from, activation),
by = .(to, from, activation)]
#edges[edge_to_flip == 1, activation := -1*activation]
edges[, prior_edge:= 1]
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, prior_edge)],
by = c("to","from"),
all.x = T)
edges[, prior_edge := NULL]
PRROC_obj <- roc.curve(scores.class0 = !is.na(all_pos_edges$prior_edge),
weights.class0 = !is.na(all_pos_edges$true_edge),
curve=FALSE)
print(paste(noise,
"noise, AUC = ",
PRROC_obj$auc)
)
edge_mat <- matrix(0, nrow = nrow(genes), ncol = nrow(genes))
update_edge_mat <- function(edge_mat, from, to, activation){
edge_mat[from, to] <<- activation #effect of row on column
}
edges[,
update_edge_mat(edge_mat,from, to, activation),
by= .(from, to)]
prior_name <- paste0("edge_prior_matrix_chalmers_350_noise_",noise,".csv")
write.table(edge_mat,
paste0("C:/STUDIES/RESEARCH/neural_ODE/ground_truth_simulator/clean_data/",
prior_name),
sep = ",",
row.names = F,
col.names = F
)
edges <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/edge_properties.csv")
edges <- edges[, .(from, to, activation)]
genes <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/gene_names.csv")
genes[ ,x:= gsub("_input","",x)]
genes[, gene_sl := .I]
num_genes <- genes[,.N]
edges <- merge(edges, genes, by.x = "from", by.y = "x")
edges[, from := gene_sl]
edges[, gene_sl:= NULL]
edges <- merge(edges, genes, by.x = "to", by.y = "x")
edges[, to := gene_sl]
edges[, gene_sl:= NULL]
edges[, true_edge := 1]
all_pos_edges <- data.table(expand.grid(1:num_genes, 1:num_genes))
names(all_pos_edges) <- c("to", "from")
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, true_edge)],
by = c("to","from"),
all.x = T)
edges[, true_edge := NULL]
noise <- 0.05
noise_perc <- noise/0.5
edges[,activation := as.integer(2*(activation - 0.5))]
edges[, edge_to_flip:= 0]
edges[, edge_to_reloc := 0]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_flip := 1]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_reloc := 1]
reloc_edge <- function(to, from, activation){
#change edge location
return(as.list(
c(
as.integer(sample(1:num_genes,2, replace = F)),
as.integer(activation))
)
)
}
#MUTATE edges
edges[edge_to_reloc ==1,
c("to", "from", "activation"):=
reloc_edge(to, from, activation),
by = .(to, from, activation)]
#edges[edge_to_flip == 1, activation := -1*activation]
edges[, prior_edge:= 1]
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, prior_edge)],
by = c("to","from"),
all.x = T)
edges[, prior_edge := NULL]
PRROC_obj <- roc.curve(scores.class0 = !is.na(all_pos_edges$prior_edge),
weights.class0 = !is.na(all_pos_edges$true_edge),
curve=FALSE)
print(paste(noise,
"noise, AUC = ",
PRROC_obj$auc)
)
edge_mat <- matrix(0, nrow = nrow(genes), ncol = nrow(genes))
update_edge_mat <- function(edge_mat, from, to, activation){
edge_mat[from, to] <<- activation #effect of row on column
}
edges[,
update_edge_mat(edge_mat,from, to, activation),
by= .(from, to)]
prior_name <- paste0("edge_prior_matrix_chalmers_350_noise_",noise,".csv")
write.table(edge_mat,
paste0("C:/STUDIES/RESEARCH/neural_ODE/ground_truth_simulator/clean_data/",
prior_name),
sep = ",",
row.names = F,
col.names = F
)
prior_name
edges <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/edge_properties.csv")
edges <- edges[, .(from, to, activation)]
genes <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_chalmers_350_prior_40_0308/gene_names.csv")
genes[ ,x:= gsub("_input","",x)]
genes[, gene_sl := .I]
num_genes <- genes[,.N]
edges <- merge(edges, genes, by.x = "from", by.y = "x")
edges[, from := gene_sl]
edges[, gene_sl:= NULL]
edges <- merge(edges, genes, by.x = "to", by.y = "x")
edges[, to := gene_sl]
edges[, gene_sl:= NULL]
edges[, true_edge := 1]
all_pos_edges <- data.table(expand.grid(1:num_genes, 1:num_genes))
names(all_pos_edges) <- c("to", "from")
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, true_edge)],
by = c("to","from"),
all.x = T)
edges[, true_edge := NULL]
noise <- 0.025
noise_perc <- noise/0.5
edges[,activation := as.integer(2*(activation - 0.5))]
edges[, edge_to_flip:= 0]
edges[, edge_to_reloc := 0]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_flip := 1]
edges[sample(.N,.N*noise_perc,replace = F) , edge_to_reloc := 1]
reloc_edge <- function(to, from, activation){
#change edge location
return(as.list(
c(
as.integer(sample(1:num_genes,2, replace = F)),
as.integer(activation))
)
)
}
#MUTATE edges
edges[edge_to_reloc ==1,
c("to", "from", "activation"):=
reloc_edge(to, from, activation),
by = .(to, from, activation)]
#edges[edge_to_flip == 1, activation := -1*activation]
edges[, prior_edge:= 1]
all_pos_edges <- merge(all_pos_edges,
edges[,.(to, from, prior_edge)],
by = c("to","from"),
all.x = T)
edges[, prior_edge := NULL]
PRROC_obj <- roc.curve(scores.class0 = !is.na(all_pos_edges$prior_edge),
weights.class0 = !is.na(all_pos_edges$true_edge),
curve=FALSE)
print(paste(noise,
"noise, AUC = ",
PRROC_obj$auc)
)
edge_mat <- matrix(0, nrow = nrow(genes), ncol = nrow(genes))
update_edge_mat <- function(edge_mat, from, to, activation){
edge_mat[from, to] <<- activation #effect of row on column
}
edges[,
update_edge_mat(edge_mat,from, to, activation),
by= .(from, to)]
prior_name <- paste0("edge_prior_matrix_chalmers_350_noise_",noise,".csv")
write.table(edge_mat,
paste0("C:/STUDIES/RESEARCH/neural_ODE/ground_truth_simulator/clean_data/",
prior_name),
sep = ",",
row.names = F,
col.names = F
)
eff_mat <- fread("C:/Users/Intekhab Hossain/Desktop/model_inspect_desmedt_4000_compete_150_0719/lambda_0.99_120_early_6000/effects_mat.csv")
